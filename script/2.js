/*1. Дан код:

Почему код даёт именно такие результаты?

var a = 1 , b = 1 , c , d;
c = ++ a ; alert ( c ); // 2 
Префиксная форма инкремента сначала увеличивает на 1 переменную a
 затем присваетвает результат переменной с

d = b ++; alert ( d ); // 1
постфиксная форма инкремента увеличивает значение переменной b после присваивания переменной d
значения из переменной b

c = ( 2 + ++ a ); alert ( c ); // 5
Увеличили a до 3, т.к. используем префиксный инкремент,
далее сложили 2 и 3(из переменной a)

d = ( 2 + b ++); alert ( d ); // 4
Здесь сперва сложили 2 и 2(из переменной b), далее вернули значекние в переменную b равное 3,
использую постфиксную форму инкремента

alert ( a ); // 3
alert ( b ); // 3
Обе этих переменных увеличили по два раза на 1
 применением префиксную и постфиксную форму ++ */

/* 2. Чему будет равен x в примере ниже?
var a = 2;
var x = 1 + ( a *= 2 );
"x" будет равен 5, сперва переменную "a" умножили на 2, затем ей вернули результат 4, скобочки 
нужны, что бы присвоить значение переменной "a" т.к. оператор "=" имеет один из низших 
приорететов затем к 4 прибавили 1 и присвоили результат переменной "x"*/

/*3. Объявить две целочисленные переменные a и b и задать им произвольные начальные
значения. Затем написать скрипт, который работает по следующему принципу:
o если a и b положительные, вывести их разность;
o если а и b отрицательные, вывести их произведение;
o если а и b разных знаков, вывести их сумму;
ноль можно считать положительным числом.*/

var a = Math.round(Math.random() * 15) - 10,
    b = Math.round(Math.random() * 10) - 10;
if (a > 0 && b > 0) {
    x = a - b;
    alert(x);
} else if (a < 0 && b < 0) {
    x = a * b;
    alert(x);
} else {
    x = a + b;
    alert(x);
}

/*4. Присвоить переменной а значение в промежутке [0..15]. С помощью оператора switch
организовать вывод чисел от a до 15*/

a = Math.round(Math.random() * 15);
switch (a) {
    case 1:
        alert(1);
    case 2:
        alert(2);
    case 3:
        alert(3);
    case 4:
        alert(4);
    case 5:
        alert(5);
    case 6:
        alert(6);
    case 7:
        alert(7);
    case 8:
        alert(8);
    case 9:
        alert(9);
    case 10:
        alert(10);
    case 11:
        alert(11);
    case 12:
        alert(12);
    case 13:
        alert(13);
    case 14:
        alert(14);
    case 15:
        alert(15);

}

/*5. Реализовать основные 4 арифметические операции в виде функций с двумя параметрами.
Обязательно использовать оператор return*/

function multiplication(x, y) {
    var z = x * y;
    return z;
}
alert(multiplication(5, 3))

function division(x, y) {
    var z = x / y;
    return z;
}
alert(division(15, 3));

function sum(x, y) {
    var z = x + y;
    return z;
}
alert(sum(2, 2));

function subtraction(x, y) {
    var z = x - y;
    return z;
}
alert(subtraction(18, 8));

/*6. Реализовать функцию с тремя параметрами: function mathOperation(arg1, arg2, operation), где
arg1, arg2 – значения аргументов, operation – строка с названием операции. В зависимости от
переданного значения операции выполнить одну из арифметических операций (использовать
функции из пункта 5) и вернуть полученное значение (использовать switch).*/

function mathOperation(arg1, arg2, operation) {
    switch (operation) {
        case "сложение":
            return arg1 + arg2;
            break;
        case "вычитание":
            return arg1 - arg2;
            break;
        case "деление":
            return arg1 / arg2;
            break;
        case "умножение":
            return arg1 * arg2;
            break;
    }
}
alert(mathOperation(6,7,"умножение"));